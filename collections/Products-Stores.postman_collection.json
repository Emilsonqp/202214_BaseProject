{
	"info": {
		"_postman_id": "c7bc359e-17ff-4fae-a7bd-7ca97f67f4c4",
		"name": "Products-Stores",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15507857"
	},
	"item": [
		{
			"name": "Asociar tienda oferente de un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"{{storeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Asociar tienda oferente de un producto que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeX}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"{{storeX}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener todas las tiendas que ofrece un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una tienda que ofrece un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"{{storeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una tienda que ofrece un producto que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productX}}/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productX}}",
						"stores",
						"{{storeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar las tiendas que ofrecen un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": \"{{storeId}}\",\r\n        \"name\": \"exito\",\r\n        \"city\": \"BOG\",\r\n        \"address\": \"calle 1\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar las tiendas que ofrecen un producto, id tienda inv√°lido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": \"{{storeX}}\",\r\n        \"name\": \"exito\",\r\n        \"city\": \"BOG\",\r\n        \"address\": \"calle 1\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar tienda que ofrece un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"   pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}",
						"stores",
						"{{storeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar tienda queno ofrece un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{productX}}/stores/{{storeId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productX}}",
						"stores",
						"{{storeId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "productId",
			"value": "80df669b-3069-41d0-9407-5b423ad47662",
			"type": "string"
		},
		{
			"key": "storeId",
			"value": "f8bb263b-a751-43dc-8943-b4a51bf9c1ee",
			"type": "string"
		},
		{
			"key": "productX",
			"value": "e432f3f8-09b5-46cd-9545-926bfab01431",
			"type": "string"
		},
		{
			"key": "storeX",
			"value": "01ca8e0a-457c-4b14-bae4-210136bcf6b2",
			"type": "string"
		}
	]
}